# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..file_utils import requires_tf


class TensorFlowBenchmarkArguments:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TensorFlowBenchmark:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


def tf_top_k_top_p_filtering(*args, **kwargs):
    requires_tf(tf_top_k_top_p_filtering)


class TFPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFSequenceSummary:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFSharedEmbeddings:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


def shape_list(*args, **kwargs):
    requires_tf(shape_list)


TF_ALBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFAlbertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAlbertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_MODEL_FOR_CAUSAL_LM_MAPPING = None


TF_MODEL_FOR_MASKED_LM_MAPPING = None


TF_MODEL_FOR_MULTIPLE_CHOICE_MAPPING = None


TF_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING = None


TF_MODEL_FOR_PRETRAINING_MAPPING = None


TF_MODEL_FOR_QUESTION_ANSWERING_MAPPING = None


TF_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING = None


TF_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING = None


TF_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING = None


TF_MODEL_MAPPING = None


TF_MODEL_WITH_LM_HEAD_MAPPING = None


class TFAutoModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForSeq2SeqLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFAutoModelWithLMHead:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBartForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBartModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBartPretrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_BERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFBertEmbeddings:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFBertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFBertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBlenderbotForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBlenderbotModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBlenderbotSmallForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFBlenderbotSmallModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_CAMEMBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFCamembertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCamembertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCamembertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCamembertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCamembertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCamembertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_CONVBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFConvBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFConvBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_CTRL_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFCTRLForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCTRLLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCTRLModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFCTRLPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_DISTILBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFDistilBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFDistilBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_DPR_CONTEXT_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST = None


TF_DPR_QUESTION_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST = None


TF_DPR_READER_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFDPRContextEncoder:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFDPRPretrainedContextEncoder:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFDPRPretrainedQuestionEncoder:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFDPRPretrainedReader:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFDPRQuestionEncoder:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFDPRReader:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


TF_ELECTRA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFElectraForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFElectraForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFElectraForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFElectraForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFElectraForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFElectraForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFElectraModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFElectraPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_FLAUBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFFlaubertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFlaubertForQuestionAnsweringSimple:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFlaubertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFlaubertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFlaubertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFlaubertWithLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_FUNNEL_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFFunnelBaseModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFFunnelModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_GPT2_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFGPT2DoubleHeadsModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFGPT2ForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFGPT2LMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFGPT2MainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFGPT2Model:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFGPT2PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLEDForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLEDModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLEDPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_LONGFORMER_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFLongformerForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLongformerForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLongformerForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLongformerForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLongformerForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLongformerModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLongformerSelfAttention:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


TF_LXMERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFLxmertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFLxmertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFLxmertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLxmertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFLxmertVisualFeatureEncoder:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFMarian:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFMarianMTModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMBartForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMBartModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_MOBILEBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFMobileBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMobileBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_MPNET_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFMPNetForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMPNetPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMT5EncoderModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMT5ForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFMT5Model:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFOpenAIGPTDoubleHeadsModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFOpenAIGPTForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFOpenAIGPTLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFOpenAIGPTMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFOpenAIGPTModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFOpenAIGPTPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFPegasusForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFPegasusModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRagModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRagSequenceForGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFRagTokenForGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFRobertaForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFRobertaPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_T5_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFT5EncoderModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFT5ForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFT5Model:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFT5PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFAdaptiveEmbedding:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFTransfoXLForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFTransfoXLLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFTransfoXLMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFTransfoXLModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFTransfoXLPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_XLM_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFXLMForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMForQuestionAnsweringSimple:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFXLMModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMWithLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_XLM_ROBERTA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFXLMRobertaForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMRobertaForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMRobertaForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMRobertaForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMRobertaForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLMRobertaModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


TF_XLNET_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFXLNetForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetForQuestionAnsweringSimple:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetMainLayer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class TFXLNetPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_tf(self)

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_tf(self)


class AdamWeightDecay:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class GradientAccumulator:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


class WarmUp:
    def __init__(self, *args, **kwargs):
        requires_tf(self)


def create_optimizer(*args, **kwargs):
    requires_tf(create_optimizer)


class TFTrainer:
    def __init__(self, *args, **kwargs):
        requires_tf(self)
